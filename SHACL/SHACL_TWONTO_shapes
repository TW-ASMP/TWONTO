@prefix tw: <http://www.toronto.ca/TWONTO#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix dash: <http://datashapes.org/dash#>.

##################################################################################
# Notes 4Dev  
##################################################################################
# I will be using 
# sh:maxCount 1 ; to say that a property is singular and optional
# sh:minCount 1 ; sh:maxCount1 ; to say that the property is singular and required
# sh:minCount 1 ; to say that a property is required and expect an array
# sh:minCount 0 ; to say that a property is option and expect an array

#################################################################################
# NODES HAPE DEFINITIONS
##################################################################################

# MOTOR SHAPE

tw:Motor_defaultShape
	a sh:NodeShape ;
	sh:targetClass tw:motor ;    
	sh:property [
		sh:path tw:hasProperty ;
		sh:class tw:ratedPowerOutput ;
		sh:name "rated power output";
		sh:minCount 1 ; sh:maxCount 1 ; 
		# a functional property, but only for motors
		sh:node tw:powerSpec_nodeShape ;
		sh:severity sh:Violation ;
		sh:order 10 ;
	] ;
	#4Dev: can have more than 1 of the property:
	sh:property [
		sh:path tw:hasProperty ;
		sh:class tw:nominalInputVoltage ;
		sh:name "nominal input voltage";
		sh:minCount 1 ; 
		sh:node tw:voltageSpec_nodeShape ;
		sh:severity sh:Violation ;
		sh:order 20 ;
	] ;
	sh:property [
		sh:path tw:hasSealedOrShieldedBearing ;
		sh:name "has sealed or shiedled bearing";
		sh:datatype xsd:boolean ;
		sh:maxCount 1 ; sh:minCount 1 ;#functional property
		sh:severity sh:Violation ;
		sh:order 30 ;
	] ;
	sh:property [
		sh:path tw:usesBearingLubricantType ;
		sh:name "uses bearing lubricant type";
		sh:datatype xsd:string ;
		sh:in ( "oil" "grease" ) ;
		sh:maxCount 1 ;
		sh:severity sh:Violation ;
		sh:order 40 ;
	] ;

	sh:or ( #4Dev: using the material implication rule to express and if-then statement;
		sh:not [  #: this is the if block;
				sh:path tw:hasSealedOrShieldedBearing ; 
				sh:hasValue false ;
			]
			[	
				sh:path tw:usesBearingLubricantType ;
				sh:minCount 1 ;
				sh:severity sh:Violation ;
			]  
	) ;

	#Dependancy condition
	# sh:and (
	# 	[	#4Dev: this first part has the conditional
	# 		sh:path tw:hasSealedOrShieldedBearing ; 
	# 		sh:hasValue false ;
	# 	]
	# 	[	#4Dev: this is the conditional outcome
	# 		sh:path tw:usesBearingLubricantType ;
	# 		sh:minCount 1 ; 
	# 	]
	# ) ;

	
	#4Dev: these nested logical conditions above state:
	#if hasSealedOrShieldedBearing value is true, then the user does not need to provide a value for usesBearingLubricantType (i.e. it is optional)
	#but if hasSealedOrShieldedBearing value is false, then the user must also provide a value for usesBearingLubricantType

	sh:property [
		sh:path tw:has_NEMA_enclosureType ; #4Dev: the property label on the form "NEMA enclosure type" is the RDFS:label of this OWL dataProperty.
		sh:name "NEMA enclosure type";
		sh:datatype xsd:string ;
		sh:in ( "ODP" "TEFC" "TENV" "TEAO" "TEWD" "EXPL" "HAZ" ) ;
		sh:maxCount 1 ; sh:minCount 1 ;
		sh:message "Value must be a string and should be found in the standard / dropdown value list" ;
    	sh:severity sh:Warning ; #4Dev: this line tells you to allow alternatives
		sh:order 50 ;
	] ;
	sh:property [
		sh:maxCount 1 ; sh:minCount 1 ;
		sh:path tw:has_NEMA_enclosureType ;
		sh:severity sh:Violation ;
	] ;

    sh:property [
		sh:path tw:has_NEMA_frameType ;
		sh:name "NEMA frame rating";
		sh:datatype xsd:string ;
		sh:in ( "42" "48" "48H" "56" "56H" "56HZ" "66" "143T" "145T" "146AT" "148AT" "149AT" "1412AT" "182" "184" "182T" "184T" "182AT" "L182ACY" "186ACY" "186AT" "L186AT" "189AT" "203#" "204#" "213" "215" "213T" "215T" "219AT" "2110AT" "224#" "225#" "254#" "254U" "256U" "254T" "256T" "284#" "284U" "286U" "284T" "286T" "284TS" "286TS" "324#" "326#" "324U" "326U" "324T" "326T" "324TS" "326TS" "364#" "364S#" "365#" "364U" "365U" "364T" "365T" "364TS" "365TS" "404T" "405T" "404TS" "405TS" "404U" "405U" "444T" "445T" "447T&&" "444TS" "447TS&&" "445TS" "444U" "445U" "449T" "449TS" "#Other" ) ;
		sh:message "Value must be a string and should be found in the standard / dropdown value list" ;
    	sh:severity sh:Warning ;
		sh:order 60 ;
	] ;
	sh:property [
		sh:path tw:has_NEMA_enclosureType ;
		sh:maxCount 1 ; sh:minCount 1 ;
		sh:severity sh:Violation ;
	] .

##################################################################################
# RE-USABLE PROPERTY SHAPE DEFINITIONS
##################################################################################



tw:voltageSpec_nodeShape
	a sh:NodeShape;
	sh:property [
		sh:path tw:isQuantifiedBy ;
		sh:class tw:measureOfVoltage ;
		sh:minCount 1 ;
		sh:node [
			sh:property [
				sh:maxCount 1 ; sh:minCount 1 ;
				sh:path tw:hasNumericValue ;
				sh:datatype xsd:float ;
				sh:order 10 ;
			];
			sh:property [
				sh:maxCount 1 ; sh:minCount 1 ;
				sh:path tw:hasUnitOfMeasure ;
				sh:class tw:unitOfVoltage ;
				dash:editor dash:InstancesSelectEditor ;
				sh:order 20 ;
			];
		];
	] .

tw:powerSpec_nodeShape
	a sh:NodeShape;
	sh:property [
		sh:path tw:isQuantifiedBy ;
		sh:class tw:measureOfPowerLevel ;
		sh:minCount 1 ;
		sh:node [
			sh:property [
				sh:maxCount 1 ; 
				sh:minCount 1 ;
				sh:path tw:hasNumericValue ;
				sh:datatype xsd:float ;
				sh:order 10 ;
			];
			sh:property [
				sh:maxCount 1 ; sh:minCount 1 ;
				sh:path tw:hasUnitOfMeasure ;
				sh:class tw:unitOfPower ;
				dash:editor dash:InstancesSelectEditor ;
				sh:order 20 ;
				#4Dev, this is similar to sh:in, except define instances of the sh:class value are presented
			];
		];
	] .
